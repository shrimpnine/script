#!/bin/bash

_packge=false #是否打包
_packge_no=false #是否跳过打包
_packgecmd="tar" #用什么方式打包 默认tar
_packgecmd_password="" #打包密码

_pwd=`pwd` #默认提取当前目录下的list文件
_sys_backup_list="sys_backup_list" #默认list文件的名字
_out="$(date +%Y%m%d_%H%M%S)_sys_backup" #输出文件夹的名字
_outpath="$_pwd/$_out" #目标目录 默认当前目录下的out目录

function fn_help() {
    echo "Example:"
    echo -e "\t$0 -y7 -p 123 -l ./Example/sys_backup/sys_backup_list -o ~/backup/"
    echo -e "\t\t-l 指定sys_backup_list文件路径 默认提取当前目录下的sys_backup_list文件"
    echo -e "\t\t-y -n 是否打包 默认false"
    echo -e "\t\t-7 用7z打包 默认tar"
    echo -e "\t\t-p 123 添加7z打包的密码"
    echo -e "\t\t-o 指定打包输出目录 默认输出到当前执行脚本的目录下"
    exit 1
}
while getopts hl:o:p:yn7 opt; do
    case ${opt} in
        h) fn_help ;;
    	l)
           	_pwd=${OPTARG%/*}
           	_sys_backup_list=${OPTARG##*/} #指定list文件的名字
    	;;
        o) _outpath="$OPTARG/$_out" ;;
        p) _packgecmd_password=$OPTARG ;;
        y) _packge=true ;;
        n) _packge_no=true ;;
        7) _packgecmd="7z" ;;
        ?) echo "# Argument Error：$OPTARG" 1>&2 ; fn_help
    esac
done

if [[ ! -f $_pwd/$_sys_backup_list ]] ; then #检查list文件是否存在
	echo "# Cannot access $_pwd/$_sys_backup_list..." 1>&2
	echo "# Please create and designate $_sys_backup_list." 1>&2
	exit 2
fi

echo "# Backup start..."

if [[ ! $_packge_no ]] ; then #没有指定-y -n 参数时 选择是否打包
	if [[ ! $_packge ]] ; then
		while true
		do
			echo "# Packed as *.$_packgecmd? [Y\n]"
			read y_n
			if [[ -z "$y_n" ]] ; then
				y_n="y"
			fi
			if [[ "$y_n" =~ (y|Y) ]] ; then
				_packge=true
				break
			elif [[ "$y_n" =~ (n|N) ]] ; then
				break
			else
			    continue
			fi
		done
	fi
fi

_IFS="$IFS"
IFS=$'\n'
declare -a arrlistfile
for line in `cat $_pwd/$_sys_backup_list` ; do #lsit文件 存为数组 将arrlistfile过滤为绝对目录
	if [[ ! $line =~ (^$)|(^#)|(^.+#) ]] ; then #忽略空行和注释行
		if [[ $line =~ (/$) ]]; then #清理目录末尾的/字符
			line=${line%/*} #从右向左截取第一个/后面的字符串
		fi
		if [[ $line =~ (^./) ]]; then #捕获 ./ 开头的line
			arrlistfile=("${arrlistfile[@]}" $_pwd${line#*.}) #去掉. 添加$_pwd
		elif [[ $line =~ (^/) ]]; then #捕获 / 开头的line
			arrlistfile=("${arrlistfile[@]}" $line)
		fi
	fi
done

_file_sum=0 #计数
for line in ${arrlistfile[@]} ; do
	if [[ -e $line ]] ; then
		if [[ -d $line ]] ; then
    		for d in `find $line -type d` ; do #列出目录下的所有文件文件夹
    			mkdir -p $_outpath$d #输出文件夹内创建目录
    		done
    		for f in `find $line -type f` ; do #列出目录下的所有文件
    			if [[ ! $f =~ ^\._*$|\.DS_Store$ ]] ; then #忽略.DS_Store和._前缀的Mac缓存文件
                    ((_file_sum++))
                    term_cols=$(tput cols)  # 获取终端宽度
                    max_bar_width=$((term_cols - ${#_file_sum} - 11))  # 留出空间给其他文本（如 "Progress: " 和 "%"）
                    printf "\r\033[K"
                    printf "Progress:%s:%s" "$_file_sum" "${f:0:$max_bar_width}"
                    printf "\r\033[K"
                    cp -a $f $_outpath${line}
                    sleep 0.001
			    else
					printf "\r\033[K"
			        echo "## Ignored: $f "
				fi
    		done
		elif [[ -f $line ]] ; then
			if [[ ! -d $_outpath${line%/*} ]] ; then
				mkdir -p $_outpath${line%/*}
			fi
			((_file_sum++))
            term_cols=$(tput cols)  # 获取终端宽度
            max_bar_width=$((term_cols - ${#_file_sum} - 3))  # 留出空间给其他文本（如 "Progress: " 和 "%"）
            printf "\r\033[K"
            printf "Progress:%s:%s" "$_file_sum" "${line:0:$max_bar_width}"
            printf "\r\033[K"
            cp -a $line $_outpath${line}
            sleep 0.001
		else
		    printf "\r\033[K"
		    echo "## \"$line\": What is this????"
		fi
	else
	    printf "\r\033[K"
		echo "## \"$line\": No such file or directory. Be ignored" 1>&2
	fi
done

IFS="$_IFS" #还原IFS变量
if $_packge ; then #打包
	cd ${_outpath%/*}
	if [[ $_packgecmd == "tar" ]] ; then
		echo "# Packing.... $_out.tgz"
		tar -cvpzf $_out.tgz $_out --remove-files
	elif [[ $_packgecmd == "7z" ]] ; then
		echo "# Packing.... $_out.7z"
		if [[ $_packgecmd_password != "" ]] ; then
			7zz a -sdel -mhe=on -p$_packgecmd_password $_out.7z $_out
		else
			7zz a -sdel $_out.7z $_out
		fi
	fi
	echo "******"
	echo "# Packing Complete."
fi

echo "# Have been $_file_sum files backup."
echo "# Done."
